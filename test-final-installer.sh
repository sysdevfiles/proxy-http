#!/bin/bash

# Test de validaci√≥n del instalador HTTP Proxy 101
# Verifica que todas las funciones est√©n correctamente implementadas

echo "üß™ VALIDANDO INSTALADOR HTTP PROXY 101"
echo "======================================"
echo ""

# Verificar que el archivo principal existe
if [[ ! -f "proxy-http.sh" ]]; then
    echo "‚ùå ERROR: proxy-http.sh no encontrado"
    exit 1
fi

# Verificar sintaxis bash
echo "1. ‚úÖ Verificando sintaxis bash..."
if bash -n proxy-http.sh; then
    echo "   ‚úÖ Sintaxis correcta"
else
    echo "   ‚ùå Error de sintaxis"
    exit 1
fi

# Verificar funciones cr√≠ticas
echo ""
echo "2. ‚úÖ Verificando funciones cr√≠ticas..."

critical_functions=(
    "install_node_dependencies"
    "check_and_free_port_80"
    "detect_and_fix_nodejs"
    "create_fallback_server"
    "fix_snap_nodejs_issues"
    "run_npm_with_timeout"
)

for func in "${critical_functions[@]}"; do
    if grep -q "^${func}()" proxy-http.sh; then
        echo "   ‚úÖ $func() encontrada"
    else
        echo "   ‚ùå $func() no encontrada"
        exit 1
    fi
done

# Verificar mejoras espec√≠ficas de Snap Node.js
echo ""
echo "3. ‚úÖ Verificando mejoras Snap Node.js..."

snap_fixes=(
    "fix_snap_nodejs_issues"
    "npm config set prefix"
    "npm config set cache"
    "timeout.*npm install"
    "snap remove node"
)

for fix in "${snap_fixes[@]}"; do
    if grep -q "$fix" proxy-http.sh; then
        echo "   ‚úÖ $fix implementado"
    else
        echo "   ‚ö†Ô∏è  $fix no encontrado"
    fi
done

# Verificar templates embebidos
echo ""
echo "4. ‚úÖ Verificando templates embebidos..."

templates=(
    "cat > \"\$PROJECT_DIR/package.json\""
    "cat > \"\$PROJECT_DIR/src/server.js\""
    "cat > \"\$PROJECT_DIR/config/config.json\""
    "cat > \"\$PROJECT_DIR/src/server-basic.js\""
)

for template in "${templates[@]}"; do
    if grep -q "$template" proxy-http.sh; then
        echo "   ‚úÖ Template embebido encontrado"
    else
        echo "   ‚ùå Template embebido faltante: $template"
        exit 1
    fi
done

# Verificar manejo de timeouts
echo ""
echo "5. ‚úÖ Verificando manejo de timeouts..."

if grep -q "timeout.*npm install" proxy-http.sh; then
    echo "   ‚úÖ Timeout npm implementado"
else
    echo "   ‚ùå Timeout npm no encontrado"
    exit 1
fi

# Verificar que main() llama a todas las funciones necesarias
echo ""
echo "6. ‚úÖ Verificando funci√≥n main()..."

main_calls=(
    "install_node_dependencies"
    "check_and_free_port_80"
    "create_fallback_server"
)

for call in "${main_calls[@]}"; do
    if grep -A 20 "main()" proxy-http.sh | grep -q "$call"; then
        echo "   ‚úÖ main() llama $call"
    else
        echo "   ‚ùå main() no llama $call"
        exit 1
    fi
done

echo ""
echo "üéâ ¬°VALIDACI√ìN COMPLETADA EXITOSAMENTE!"
echo ""
echo "üìã RESUMEN DE MEJORAS IMPLEMENTADAS:"
echo "   ‚úÖ Resoluci√≥n de conflictos Snap Node.js"
echo "   ‚úÖ Sistema multi-m√©todo de instalaci√≥n npm"
echo "   ‚úÖ Timeouts para evitar colgado de npm"
echo "   ‚úÖ Servidor b√°sico alternativo sin dependencias"
echo "   ‚úÖ Auto-detecci√≥n y configuraci√≥n de Node.js"
echo "   ‚úÖ Auto-liberaci√≥n de puerto 80"
echo "   ‚úÖ Templates embebidos para instalaci√≥n wget"
echo ""
echo "üöÄ INSTALADOR LISTO PARA PRODUCCI√ìN"
echo ""
echo "‚ö° Comando wget actualizado:"
echo "wget --no-cache https://raw.githubusercontent.com/sysdevfiles/proxy-http/main/proxy-http.sh -O proxy-http.sh && chmod +x proxy-http.sh && sudo bash proxy-http.sh && rm proxy-http.sh"
